// Copyright 2024 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

import "psi/proto/common.proto";

package psi;

enum PirBackend {
  BACKEND_UNKNOWN = 0;
  BACKEND_APSI = 1;
  BACKEND_SEAL_PIR = 2;
  BACKEND_KW_SEAL_PIR = 3;
}

message AlgorithmConfig {
  PirBackend backend_type = 1;
  uint64 ind_degree = 2;
  uint64 max_batch_query_size = 3;
}

message Schema {
  repeated Field keys = 1;
  repeated Field values = 2;
}

message Field {
  string name = 1;
  DataType type = 2;
}

message TlSConfig {
  // Certificate file path
  string certificate_path = 1;

  // Private key file path
  string private_key_path = 2;

  // The trusted CA file to verify the peer's certificate
  // If empty, use the system default CA files
  string ca_file_path = 3;
}

message DataProxyLinkConfig {
  string data_proxy_addr = 1;

  TlSConfig tls_config = 2;
}

enum FileType {
  FILE_TYPE_UNKNOWN = 0;
  FILE_TYPE_CSV = 1;
}

message LocalFileConfig {
  FileType file_type = 1;
  string file_name = 2;
}

message DPDownLoadConfig {
  DataProxyLinkConfig link_config = 1;

  string domaindata_id = 2;

  // specific the partition column and value, such as "dmdt=20240520"
  string partition_spec = 3;
}

message DPUploadConfig {
  DataProxyLinkConfig link_config = 1;

  string domaindata_id = 2;

  string relative_uri = 3;

  string datasource_id = 4;
}

message InputTabelConfig {
  Schema schema = 1;

  oneof read_option {
    DPDownLoadConfig dp_config = 4;
    LocalFileConfig file_config = 5;
  }
}

message PirPreprocessTaskConfig {
  InputTabelConfig input = 1;

  string db_path = 2;

  DPUploadConfig db_upload_dst = 3;

  AlgorithmConfig algorithm_config = 4;
}

message PirServerConfig {
  string id = 1;

  string host = 2;

  uint32 server_port = 3;

  uint32 num_threads = 4;

  InputTabelConfig input = 5;

  // if not specified, use /tmp/xxx
  // if specified, and this path dir is not empty, will try to load from it
  string db_path = 6;

  // used for loading db file from dp
  // if domaindata_id is not null, will download db from db
  // and ignore input
  DPDownLoadConfig db_download_config = 7;

  reserved 8, 9;

  AlgorithmConfig algorithm_config = 10;
}

message PirClientConfig {
  string id = 1;
  string host = 2;
  uint32 port = 3;

  string server_id = 4;
  string server_address = 5;

  // column name in response table to indicate whether the query is matched
  // if not set, will use "is_match" as default
  string is_match_col_name = 6;

  reserved 7, 9;

  // for check
  AlgorithmConfig algorithm_config = 10;
}

// The report of pir task.
message PirResultReport {
  int64 match_cnt = 1;
}